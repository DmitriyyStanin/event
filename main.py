import logging
import asyncio
from vkbottle import Bot, Keyboard, KeyboardButtonColor, Text
from vkbottle.bot import BotLabeler, Message
import database
import config
from handlers.user_profile import get_user_profile, get_event_info
   

   


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot = Bot(token=config.VK_TOKEN)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Bot –¥–ª—è LongPoll
bl = BotLabeler()

async def init_db():
    global base, cur
    base, cur = await database.db_import()

# –§–æ—Ä–º–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    keyboard = (
        Keyboard()
        .add(Text("üéÑ –ü—Ä–æ—Ñ–∏–ª—å", {'cmd': "profile"}))
        .row()
        .add(Text("üìö –§—É–Ω–∫—Ü–∏–∏"), color=KeyboardButtonColor.POSITIVE)
        .add(Text("üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏", {'cmd': "event_info"}), color=KeyboardButtonColor.PRIMARY)
        .row()
        .add(Text("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), color=KeyboardButtonColor.POSITIVE)
        .add(Text("‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞"), color=KeyboardButtonColor.PRIMARY)
    )
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ JSON-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    logging.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard.get_json()}")
    
    return keyboard  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç Keyboard

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
from handlers import admin, events, leaderboard, registration, discussion

bl.load(admin.bl)
bl.load(events.bl)
bl.load(leaderboard.bl)
bl.load(registration.bl)
bl.load(discussion.bl)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.on.message()
async def message_handler(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥
    if "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" in message.text.strip():
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard=main_keyboard())
    elif message.text.strip() == "üéÑ –ü—Ä–æ—Ñ–∏–ª—å":  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        user_info = await get_user_profile(message.from_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await message.answer(user_info, keyboard=main_keyboard())
    elif message.text.strip() == "üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏":  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        event_info = await get_event_info()  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
        await message.answer(event_info, keyboard=main_keyboard())
    else:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.")


async def main():
    await init_db()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

if __name__ == "__main__":
    try:
        asyncio.run(main())  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        bot.run_forever()  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: %s", e)
